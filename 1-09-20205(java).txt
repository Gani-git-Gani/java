1.[sleepin]The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.
sleepIn(false, false) → true
sleepIn(true, false) → false
sleepIn(false, true) → true

-->
public boolean sleepIn(boolean weekday, boolean vacation) {
  if (!weekday || vacation) {
    return true;
  }
  
  return false;
  
  // Solution notes: better to write "vacation" than "vacation == true"
  // though they mean exactly the same thing.
  // Likewise "!weekday" is better than "weekday == false".
  // This all can be shortened to: return (!weekday || vacation);
  // Here we just put the return-false last, or could use an if/else.
}
------------------------------------------------------------------------------------------------------------------------------------------------------------


2.[diff21]Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.


diff21(19) → 2
diff21(10) → 11
diff21(21) → 0

-->
public int diff21(int n) {
  if (n <= 21) {
        return 21 - n;
    } else {
        return (n - 21) * 2;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------

3.[nearHundred]Given an int n, return true if it is within 10 of 100 or 200. Note: Math.abs(num) computes the absolute value of a number.


nearHundred(93) → true
nearHundred(90) → true
nearHundred(89) → false
-->

public boolean nearHundred(int n) {
  return((Math.abs(100-n)<=10)||(Math.abs(200-n)<=10));
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
4.[missingChar]Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..str.length()-1 inclusive).


missingChar("kitten", 1) → "ktten"
missingChar("kitten", 0) → "itten"
missingChar("kitten", 4) → "kittn"
-->
public String missingChar(String str, int n) {
  String front=str.substring(0,n);
  String back=str.substring(n+1,str.length());
  return front+back;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
5.[backAround]Given a string, take the last char and return a new string with the last char added at the front and back, so "cat" yields "tcatt". The original string will be length 1 or more.


backAround("cat") → "tcatt"
backAround("Hello") → "oHelloo"
backAround("a") → "aaa"

-->
public String backAround(String str) {
  String last = str.substring(str.length() - 1);
  return last + str + last;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
6.[startHi]Given a string, return true if the string starts with "hi" and false otherwise.


startHi("hi there") → true
startHi("hi") → true
startHi("hello hi") → false
-->

public boolean startHi(String str) {
  if(str.length()<2) return false;
  String firstTwo=str.substring(0,2);
  if(firstTwo.equals("hi")){
    return true;
  }
  else{
    return false;
  }

}
------------------------------------------------------------------------------------------------------------------------------------------------------------
7.[hasTeen]We'll say that a number is "teen" if it is in the range 13..19 inclusive. Given 3 int values, return true if 1 or more of them are teen.


hasTeen(13, 20, 10) → true
hasTeen(20, 19, 10) → true
hasTeen(20, 10, 13) → true
-->

public boolean hasTeen(int a, int b, int c) {
  return(a>=13 && a<=19)||(b>=13 && b<=19)||(c>=13 && c<=19);
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
8.[mixStart]Return true if the given string begins with "mix", except the 'm' can be anything, so "pix", "9ix" .. all count.


mixStart("mix snacks") → true
mixStart("pix snacks") → true
mixStart("piz snacks") → false
-->
public boolean mixStart(String str) {
  if (str.length()<3) return false;
  String two=str.substring(1,3);
   if(two.equals("ix")){
     return true;
   }
   else{
     return false;
   }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
9.[close10]Given 2 int values, return whichever value is nearest to the value 10, or return 0 in the event of a tie. Note that Math.abs(n) returns the absolute value of a number.


close10(8, 13) → 8
close10(13, 8) → 8
close10(13, 7) → 0
-->
public int close10(int a, int b) {
  int aDiff=Math.abs(a-10);
  int bDiff=Math.abs(b-10);
  
  if(aDiff<bDiff){
    return a;
  }
  if(bDiff<aDiff){
    return b;
  }
  return 0;
} 
-----------------------------------------------------------------------------------------------------------------------------------------------------------
10.[stringE]Return true if the given string contains between 1 and 3 'e' chars.


stringE("Hello") → true
stringE("Heelle") → true
stringE("Heelele") → false
-->
public boolean stringE(String str) {
  int count =0;
  for(int i=0;i<str.length(); i++){
    if(str.charAt(i)=='e')count++;
  }
  return (count>=1 && count <=3);
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
11.[parrotTrouble]We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.


parrotTrouble(true, 6) → true
parrotTrouble(true, 7) → false
parrotTrouble(false, 6) → false
-->
public boolean parrotTrouble(boolean talking, int hour) {
   return (talking && (hour < 7 || hour > 20));
  // Need extra parenthesis around the || clause
  // since && binds more tightly than ||
  // && is like arithmetic *, || is like arithmetic +
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------